{
  "version": 3,
  "sources": ["../../lambda/graphql/index.ts", "../../lambda/graphql/closet.ts"],
  "sourcesContent": ["// lambda/graphql/index.ts\r\nimport * as closet from \"./closet\";\r\n\r\ntype AppSyncEvent = {\r\n  info: { fieldName: string; parentTypeName: string };\r\n  arguments: any;\r\n  identity?: any;\r\n};\r\n\r\nexport const handler = async (event: AppSyncEvent) => {\r\n  const f = event.info.fieldName;\r\n\r\n  // Queries\r\n  if (f === \"hello\") return \"Hello from Styling Adventures \uD83D\uDC4B\";\r\n  if (f === \"myCloset\") return closet.myCloset(event);\r\n  if (f === \"adminListPending\") return closet.adminListPending(event);\r\n\r\n  // Mutations\r\n  if (f === \"createClosetItem\") return closet.createClosetItem(event);\r\n  if (f === \"requestClosetApproval\") return closet.requestClosetApproval(event);\r\n  if (f === \"adminApproveItem\") return closet.adminApproveItem(event);\r\n  if (f === \"adminRejectItem\") return closet.adminRejectItem(event);\r\n\r\n  throw new Error(`Unknown field: ${f}`);\r\n};\r\n", "// lambda/graphql/closet.ts\r\nimport {\r\n  DynamoDBClient,\r\n  PutItemCommand,\r\n  UpdateItemCommand,\r\n  GetItemCommand,\r\n  QueryCommand,\r\n} from \"@aws-sdk/client-dynamodb\";\r\nimport {\r\n  SFNClient,\r\n  StartExecutionCommand,\r\n  SendTaskSuccessCommand,\r\n  SendTaskFailureCommand,\r\n} from \"@aws-sdk/client-sfn\";\r\nimport { randomUUID } from \"crypto\";\r\n\r\nconst ddb = new DynamoDBClient({});\r\nconst sfn = new SFNClient({});\r\n\r\nconst { TABLE_NAME = \"\", APPROVAL_SM_ARN = \"\" } = process.env;\r\nif (!TABLE_NAME) throw new Error(\"Missing env: TABLE_NAME\");\r\n\r\nconst S = (v: string) => ({ S: v });\r\nconst nowIso = () => new Date().toISOString();\r\n\r\n// --- helper (auth claims)\r\nfunction getSubAndAdmin(event: any) {\r\n  const claims = event?.identity?.claims || {};\r\n  const sub: string | undefined = event?.identity?.sub || claims?.sub;\r\n  const rawGroups = claims?.[\"cognito:groups\"];\r\n  const groups: string[] = Array.isArray(rawGroups)\r\n    ? (rawGroups as string[])\r\n    : String(rawGroups || \"\")\r\n        .split(\",\")\r\n        .map((x: string) => x.trim())\r\n        .filter(Boolean);\r\n  const isAdmin = groups.includes(\"ADMIN\");\r\n  if (!sub) throw new Error(\"Unauthorized\");\r\n  return { sub, isAdmin };\r\n}\r\n\r\n/** -------- Queries -------- */\r\nexport const myCloset = async (event: any) => {\r\n  const { sub } = getSubAndAdmin(event);\r\n  const out = await ddb.send(\r\n    new QueryCommand({\r\n      TableName: TABLE_NAME,\r\n      IndexName: \"gsi1\",\r\n      KeyConditionExpression: \"gsi1pk = :p\",\r\n      ExpressionAttributeValues: { \":p\": S(`OWNER#${sub}`) },\r\n      ScanIndexForward: false,\r\n      ProjectionExpression:\r\n        \"id, ownerSub, #s, createdAt, updatedAt, mediaKey, title, reason\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n    }),\r\n  );\r\n  return (out.Items || []).map((it) => ({\r\n    id: it.id.S!,\r\n    ownerSub: it.ownerSub.S!,\r\n    status: it[\"status\"].S!,\r\n    createdAt: it.createdAt.S!,\r\n    updatedAt: it.updatedAt.S!,\r\n    mediaKey: it.mediaKey?.S ?? \"\",\r\n    title: it.title?.S ?? \"\",\r\n    reason: it.reason?.S ?? \"\",\r\n  }));\r\n};\r\n\r\nexport const adminListPending = async (event: any) => {\r\n  const { isAdmin } = getSubAndAdmin(event);\r\n  if (!isAdmin) throw new Error(\"Forbidden\");\r\n  const out = await ddb.send(\r\n    new QueryCommand({\r\n      TableName: TABLE_NAME,\r\n      IndexName: \"gsi2\",\r\n      KeyConditionExpression: \"gsi2pk = :p\",\r\n      ExpressionAttributeValues: { \":p\": S(\"STATUS#PENDING\") },\r\n      ScanIndexForward: true,\r\n      ProjectionExpression:\r\n        \"id, ownerSub, #s, createdAt, updatedAt, mediaKey, title, reason\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n    }),\r\n  );\r\n  return (out.Items || []).map((it) => ({\r\n    id: it.id.S!,\r\n    ownerSub: it.ownerSub.S!,\r\n    status: it[\"status\"].S!,\r\n    createdAt: it.createdAt.S!,\r\n    updatedAt: it.updatedAt.S!,\r\n    mediaKey: it.mediaKey?.S ?? \"\",\r\n    title: it.title?.S ?? \"\",\r\n    reason: it.reason?.S ?? \"\",\r\n  }));\r\n};\r\n\r\n/** -------- Mutations -------- */\r\nexport const createClosetItem = async (event: any) => {\r\n  const { sub } = getSubAndAdmin(event);\r\n  const args = event?.arguments || {};\r\n  const id = randomUUID();\r\n  const now = nowIso();\r\n  await ddb.send(\r\n    new PutItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Item: {\r\n        pk: S(`ITEM#${id}`),\r\n        sk: S(\"META\"),\r\n        id: S(id),\r\n        ownerSub: S(sub),\r\n        status: S(\"DRAFT\"),\r\n        title: S(args.title ?? \"\"),\r\n        mediaKey: S(args.mediaKey ?? \"\"),\r\n        createdAt: S(now),\r\n        updatedAt: S(now),\r\n        gsi1pk: S(`OWNER#${sub}`),\r\n        gsi1sk: S(now),\r\n        gsi2pk: S(\"STATUS#DRAFT\"),\r\n        gsi2sk: S(now),\r\n      },\r\n      ConditionExpression: \"attribute_not_exists(pk)\",\r\n    }),\r\n  );\r\n  return {\r\n    id,\r\n    ownerSub: sub,\r\n    status: \"DRAFT\",\r\n    title: args.title ?? \"\",\r\n    mediaKey: args.mediaKey ?? \"\",\r\n    createdAt: now,\r\n    updatedAt: now,\r\n  };\r\n};\r\n\r\nexport const requestClosetApproval = async (event: any) => {\r\n  const { sub, isAdmin } = getSubAndAdmin(event);\r\n  const id: string | undefined = event?.arguments?.id;\r\n  if (!id) throw new Error(\"id required\");\r\n  const now = nowIso();\r\n\r\n  if (!isAdmin) {\r\n    const got = await ddb.send(\r\n      new GetItemCommand({\r\n        TableName: TABLE_NAME,\r\n        Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n        ProjectionExpression: \"ownerSub\",\r\n      }),\r\n    );\r\n    if (!got.Item?.ownerSub?.S) throw new Error(\"Not found\");\r\n    if (got.Item.ownerSub.S !== sub) throw new Error(\"Not authorized\");\r\n  }\r\n\r\n  await ddb.send(\r\n    new UpdateItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n      UpdateExpression:\r\n        \"SET #s = :s, updatedAt = :u, gsi2pk = :g2pk, gsi2sk = :g2sk\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n      ExpressionAttributeValues: {\r\n        \":s\": S(\"PENDING\"),\r\n        \":u\": S(now),\r\n        \":g2pk\": S(\"STATUS#PENDING\"),\r\n        \":g2sk\": S(now),\r\n      },\r\n    }),\r\n  );\r\n\r\n  if (APPROVAL_SM_ARN) {\r\n    try {\r\n      await sfn.send(\r\n        new StartExecutionCommand({\r\n          stateMachineArn: APPROVAL_SM_ARN,\r\n          input: JSON.stringify({ itemId: id, ownerSub: sub }),\r\n          name: `req-${id}-${Date.now()}`,\r\n        }),\r\n      );\r\n    } catch {\r\n      /* non-fatal */\r\n    }\r\n  }\r\n  return `requested:${id}`;\r\n};\r\n\r\nexport const adminApproveItem = async (event: any) => {\r\n  const { isAdmin } = getSubAndAdmin(event);\r\n  if (!isAdmin) throw new Error(\"Forbidden\");\r\n  const id: string | undefined = event?.arguments?.id;\r\n  if (!id) throw new Error(\"id required\");\r\n  const now = nowIso();\r\n\r\n  const out = await ddb.send(\r\n    new UpdateItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n      UpdateExpression:\r\n        \"SET #s = :s, updatedAt = :u, gsi2pk = :g2pk, gsi2sk = :g2sk REMOVE reason, approvalToken\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n      ExpressionAttributeValues: {\r\n        \":s\": S(\"APPROVED\"),\r\n        \":u\": S(now),\r\n        \":g2pk\": S(\"STATUS#APPROVED\"),\r\n        \":g2sk\": S(now),\r\n      },\r\n      ReturnValues: \"ALL_NEW\",\r\n    }),\r\n  );\r\n\r\n  const it = out.Attributes!;\r\n  const token = it.approvalToken?.S;\r\n  if (token) {\r\n    try {\r\n      await sfn.send(\r\n        new SendTaskSuccessCommand({\r\n          taskToken: token,\r\n          output: JSON.stringify({ approved: true }),\r\n        }),\r\n      );\r\n    } catch {\r\n      /* ignore callback errors */\r\n    }\r\n  }\r\n\r\n  return {\r\n    id: it.id.S!,\r\n    ownerSub: it.ownerSub.S!,\r\n    status: it[\"status\"].S!,\r\n    createdAt: it.createdAt.S!,\r\n    updatedAt: it.updatedAt.S!,\r\n    mediaKey: it.mediaKey?.S ?? \"\",\r\n    title: it.title?.S ?? \"\",\r\n    reason: \"\",\r\n  };\r\n};\r\n\r\nexport const adminRejectItem = async (event: any) => {\r\n  const { isAdmin } = getSubAndAdmin(event);\r\n  if (!isAdmin) throw new Error(\"Forbidden\");\r\n  const id: string | undefined = event?.arguments?.id;\r\n  const reason: string = event?.arguments?.reason ?? \"\";\r\n  if (!id) throw new Error(\"id required\");\r\n  const now = nowIso();\r\n\r\n  const out = await ddb.send(\r\n    new UpdateItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n      UpdateExpression:\r\n        \"SET #s = :s, updatedAt = :u, gsi2pk = :g2pk, gsi2sk = :g2sk, reason = :r REMOVE approvalToken\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n      ExpressionAttributeValues: {\r\n        \":s\": S(\"REJECTED\"),\r\n        \":u\": S(now),\r\n        \":g2pk\": S(\"STATUS#REJECTED\"),\r\n        \":g2sk\": S(now),\r\n        \":r\": S(reason),\r\n      },\r\n      ReturnValues: \"ALL_NEW\",\r\n    }),\r\n  );\r\n\r\n  const it = out.Attributes!;\r\n  const token = it.approvalToken?.S;\r\n  if (token) {\r\n    try {\r\n      await sfn.send(\r\n        new SendTaskFailureCommand({\r\n          taskToken: token,\r\n          error: \"Rejected\",\r\n          cause: reason || \"Rejected by admin\",\r\n        }),\r\n      );\r\n    } catch {\r\n      /* ignore callback errors */\r\n    }\r\n  }\r\n\r\n  return {\r\n    id: it.id.S!,\r\n    ownerSub: it.ownerSub.S!,\r\n    status: it[\"status\"].S!,\r\n    createdAt: it.createdAt.S!,\r\n    updatedAt: it.updatedAt.S!,\r\n    mediaKey: it.mediaKey?.S ?? \"\",\r\n    title: it.title?.S ?? \"\",\r\n    reason: it.reason?.S ?? \"\",\r\n  };\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": ["graphql_exports", "__export", "handler", "__toCommonJS", "import_client_dynamodb", "import_client_sfn", "import_crypto", "ddb", "sfn", "TABLE_NAME", "APPROVAL_SM_ARN", "S", "v", "nowIso", "getSubAndAdmin", "event", "claims", "sub", "rawGroups", "isAdmin", "x", "myCloset", "it", "adminListPending", "createClosetItem", "args", "id", "now", "requestClosetApproval", "got", "adminApproveItem", "token", "adminRejectItem", "reason", "handler", "event", "f", "myCloset", "adminListPending", "createClosetItem", "requestClosetApproval", "adminApproveItem", "adminRejectItem"]
}
