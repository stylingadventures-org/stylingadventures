{
  "version": 3,
  "sources": ["../../lambda/list/index.ts"],
  "sourcesContent": ["import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3';\r\n\r\n// Path-style so host stays s3.us-east-1.amazonaws.com and avoids per-bucket DNS lookups.\r\nconst s3 = new S3Client({\r\n  region: process.env.AWS_REGION || 'us-east-1',\r\n  forcePathStyle: true,\r\n});\r\n\r\nconst BUCKET = process.env.BUCKET!;\r\nconst ORIGIN = process.env.WEB_ORIGIN || 'https://stylingadventures.com';\r\n\r\nconst cors = {\r\n  'Access-Control-Allow-Origin': ORIGIN,\r\n  'Access-Control-Allow-Credentials': 'true',\r\n  'Access-Control-Allow-Headers': 'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token',\r\n  'Access-Control-Allow-Methods': 'GET,OPTIONS',\r\n  'Content-Type': 'application/json',\r\n  'Vary': 'Origin',\r\n};\r\n\r\nexport const handler = async (event: any) => {\r\n  if ((event?.httpMethod || event?.requestContext?.http?.method) === 'OPTIONS') {\r\n    return { statusCode: 204, headers: cors, body: '' };\r\n  }\r\n\r\n  try {\r\n    const claims =\r\n      event?.requestContext?.authorizer?.claims ??\r\n      event?.requestContext?.authorizer?.jwt?.claims ??\r\n      {};\r\n    const sub = claims?.sub as string | undefined;\r\n\r\n    const queryPrefix = (event?.queryStringParameters?.prefix ?? '')\r\n      .replace(/\\.\\./g, '')\r\n      .replace(/^[/\\\\]+/, '');\r\n\r\n    const userPrefix = sub ? `users/${sub}/` : '';\r\n    const prefix = `${userPrefix}${queryPrefix}`;\r\n\r\n    const res = await s3.send(\r\n      new ListObjectsV2Command({\r\n        Bucket: BUCKET,\r\n        Prefix: prefix || undefined,\r\n        MaxKeys: 1000,\r\n      })\r\n    );\r\n\r\n    const items = (res.Contents ?? []).map(o => ({\r\n      key: o.Key,\r\n      size: o.Size,\r\n      lastModified: o.LastModified?.toISOString?.() ?? null,\r\n    }));\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: cors,\r\n      body: JSON.stringify({ prefix, items, isTruncated: !!res.IsTruncated, nextToken: res.NextContinuationToken ?? null }),\r\n    };\r\n  } catch (e: any) {\r\n    console.error(e);\r\n    return { statusCode: 500, headers: cors, body: JSON.stringify({ error: e?.message ?? String(e) }) };\r\n  }\r\n};\r\n\r\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA+C,8BAGzCC,EAAK,IAAI,WAAS,CACtB,OAAQ,QAAQ,IAAI,YAAc,YAClC,eAAgB,EAClB,CAAC,EAEKC,EAAS,QAAQ,IAAI,OACrBC,EAAS,QAAQ,IAAI,YAAc,gCAEnCC,EAAO,CACX,8BAA+BD,EAC/B,mCAAoC,OACpC,+BAAgC,6DAChC,+BAAgC,cAChC,eAAgB,mBAChB,KAAQ,QACV,EAEaL,EAAU,MAAOO,GAAe,CAC3C,IAAKA,GAAO,YAAcA,GAAO,gBAAgB,MAAM,UAAY,UACjE,MAAO,CAAE,WAAY,IAAK,QAASD,EAAM,KAAM,EAAG,EAGpD,GAAI,CAKF,IAAME,GAHJD,GAAO,gBAAgB,YAAY,QACnCA,GAAO,gBAAgB,YAAY,KAAK,QACxC,CAAC,IACiB,IAEdE,GAAeF,GAAO,uBAAuB,QAAU,IAC1D,QAAQ,QAAS,EAAE,EACnB,QAAQ,UAAW,EAAE,EAGlBG,EAAS,GADIF,EAAM,SAASA,CAAG,IAAM,EACf,GAAGC,CAAW,GAEpCE,EAAM,MAAMR,EAAG,KACnB,IAAI,uBAAqB,CACvB,OAAQC,EACR,OAAQM,GAAU,OAClB,QAAS,GACX,CAAC,CACH,EAEME,GAASD,EAAI,UAAY,CAAC,GAAG,IAAIE,IAAM,CAC3C,IAAKA,EAAE,IACP,KAAMA,EAAE,KACR,aAAcA,EAAE,cAAc,cAAc,GAAK,IACnD,EAAE,EAEF,MAAO,CACL,WAAY,IACZ,QAASP,EACT,KAAM,KAAK,UAAU,CAAE,OAAAI,EAAQ,MAAAE,EAAO,YAAa,CAAC,CAACD,EAAI,YAAa,UAAWA,EAAI,uBAAyB,IAAK,CAAC,CACtH,CACF,OAAS,EAAQ,CACf,eAAQ,MAAM,CAAC,EACR,CAAE,WAAY,IAAK,QAASL,EAAM,KAAM,KAAK,UAAU,CAAE,MAAO,GAAG,SAAW,OAAO,CAAC,CAAE,CAAC,CAAE,CACpG,CACF",
  "names": ["list_exports", "__export", "handler", "__toCommonJS", "import_client_s3", "s3", "BUCKET", "ORIGIN", "cors", "event", "sub", "queryPrefix", "prefix", "res", "items", "o"]
}
