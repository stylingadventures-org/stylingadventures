{
  "version": 3,
  "sources": ["../../lambda/trigger-thumbnail/index.ts"],
  "sourcesContent": ["// lambda/trigger-thumbnail/index.ts\r\nimport type { SQSEvent, SQSRecord } from 'aws-lambda';\r\nimport { SFNClient, StartExecutionCommand } from '@aws-sdk/client-sfn';\r\n\r\nconst sfn = new SFNClient({});\r\nconst STATE_MACHINE_ARN = process.env.THUMB_SM_ARN || '';\r\n\r\nconst isSupportedKey = (key: string) =>\r\n  /^users\\//i.test(key) && /\\.(?:jpe?g|png|webp)$/i.test(key);\r\n\r\nfunction extractS3RecordsFromBody(bodyStr: string): Array<{ bucket: string; key: string }> {\r\n  const out: Array<{ bucket: string; key: string }> = [];\r\n  let body: any;\r\n  try {\r\n    body = JSON.parse(bodyStr);\r\n  } catch {\r\n    console.warn('Skipping record; non-JSON body:', bodyStr.slice(0, 256));\r\n    return out;\r\n  }\r\n\r\n  // 1) S3\u2192SQS (Records array)\r\n  const candidates: any[] = Array.isArray(body?.Records)\r\n    ? body.Records\r\n    : body?.s3\r\n    ? [body] // 2) single S3 record\r\n    : body?.detail?.bucket?.name && body?.detail?.object?.key\r\n    ? [\r\n        // 3) EventBridge-like shape\r\n        {\r\n          s3: {\r\n            bucket: { name: body.detail.bucket.name || body.detail.bucket },\r\n            object: { key: body.detail.object.key },\r\n          },\r\n        },\r\n      ]\r\n    : [];\r\n\r\n  if (candidates.length === 0) {\r\n    console.warn('Skipping record; unrecognized body:', bodyStr.slice(0, 512));\r\n    return out;\r\n  }\r\n\r\n  for (const rec of candidates) {\r\n    const bucket = rec?.s3?.bucket?.name;\r\n    let key = rec?.s3?.object?.key as string | undefined;\r\n    if (!bucket || !key) continue;\r\n\r\n    // S3 can URL-encode keys and turn spaces to '+'\r\n    key = decodeURIComponent(String(key).replace(/\\+/g, ' '));\r\n\r\n    if (!isSupportedKey(key)) {\r\n      console.info('Ignored (filter)', { key });\r\n      continue;\r\n    }\r\n    out.push({ bucket, key });\r\n  }\r\n  return out;\r\n}\r\n\r\nexport const handler = async (event: SQSEvent) => {\r\n  if (!STATE_MACHINE_ARN) throw new Error('Missing env THUMB_SM_ARN');\r\n\r\n  console.info('SQS batch size:', event.Records.length);\r\n  const toStart: Array<{ bucket: string; key: string }> = [];\r\n\r\n  for (const r of event.Records as SQSRecord[]) {\r\n    toStart.push(...extractS3RecordsFromBody(r.body ?? ''));\r\n  }\r\n\r\n  for (const item of toStart) {\r\n    const input = JSON.stringify(item);\r\n    await sfn.send(new StartExecutionCommand({ stateMachineArn: STATE_MACHINE_ARN, input }));\r\n    console.info('Started execution', item);\r\n  }\r\n\r\n  console.info('Dispatched', toStart.length, 'execution(s).');\r\n  return { ok: true, count: toStart.length };\r\n};\r\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAEA,IAAAI,EAAiD,+BAE3CC,EAAM,IAAI,YAAU,CAAC,CAAC,EACtBC,EAAoB,QAAQ,IAAI,cAAgB,GAEhDC,EAAkBC,GACtB,YAAY,KAAKA,CAAG,GAAK,yBAAyB,KAAKA,CAAG,EAE5D,SAASC,EAAyBC,EAAyD,CACzF,IAAMC,EAA8C,CAAC,EACjDC,EACJ,GAAI,CACFA,EAAO,KAAK,MAAMF,CAAO,CAC3B,MAAQ,CACN,eAAQ,KAAK,kCAAmCA,EAAQ,MAAM,EAAG,GAAG,CAAC,EAC9DC,CACT,CAGA,IAAME,EAAoB,MAAM,QAAQD,GAAM,OAAO,EACjDA,EAAK,QACLA,GAAM,GACN,CAACA,CAAI,EACLA,GAAM,QAAQ,QAAQ,MAAQA,GAAM,QAAQ,QAAQ,IACpD,CAEE,CACE,GAAI,CACF,OAAQ,CAAE,KAAMA,EAAK,OAAO,OAAO,MAAQA,EAAK,OAAO,MAAO,EAC9D,OAAQ,CAAE,IAAKA,EAAK,OAAO,OAAO,GAAI,CACxC,CACF,CACF,EACA,CAAC,EAEL,GAAIC,EAAW,SAAW,EACxB,eAAQ,KAAK,sCAAuCH,EAAQ,MAAM,EAAG,GAAG,CAAC,EAClEC,EAGT,QAAWG,KAAOD,EAAY,CAC5B,IAAME,EAASD,GAAK,IAAI,QAAQ,KAC5BN,EAAMM,GAAK,IAAI,QAAQ,IAC3B,GAAI,GAACC,GAAU,CAACP,GAKhB,IAFAA,EAAM,mBAAmB,OAAOA,CAAG,EAAE,QAAQ,MAAO,GAAG,CAAC,EAEpD,CAACD,EAAeC,CAAG,EAAG,CACxB,QAAQ,KAAK,mBAAoB,CAAE,IAAAA,CAAI,CAAC,EACxC,QACF,CACAG,EAAI,KAAK,CAAE,OAAAI,EAAQ,IAAAP,CAAI,CAAC,EAC1B,CACA,OAAOG,CACT,CAEO,IAAMT,EAAU,MAAOc,GAAoB,CAChD,GAAI,CAACV,EAAmB,MAAM,IAAI,MAAM,0BAA0B,EAElE,QAAQ,KAAK,kBAAmBU,EAAM,QAAQ,MAAM,EACpD,IAAMC,EAAkD,CAAC,EAEzD,QAAWC,KAAKF,EAAM,QACpBC,EAAQ,KAAK,GAAGR,EAAyBS,EAAE,MAAQ,EAAE,CAAC,EAGxD,QAAWC,KAAQF,EAAS,CAC1B,IAAMG,EAAQ,KAAK,UAAUD,CAAI,EACjC,MAAMd,EAAI,KAAK,IAAI,wBAAsB,CAAE,gBAAiBC,EAAmB,MAAAc,CAAM,CAAC,CAAC,EACvF,QAAQ,KAAK,oBAAqBD,CAAI,CACxC,CAEA,eAAQ,KAAK,aAAcF,EAAQ,OAAQ,eAAe,EACnD,CAAE,GAAI,GAAM,MAAOA,EAAQ,MAAO,CAC3C",
  "names": ["trigger_thumbnail_exports", "__export", "handler", "__toCommonJS", "import_client_sfn", "sfn", "STATE_MACHINE_ARN", "isSupportedKey", "key", "extractS3RecordsFromBody", "bodyStr", "out", "body", "candidates", "rec", "bucket", "event", "toStart", "r", "item", "input"]
}
