{
  "version": 3,
  "sources": ["../../lambda/presign/index.ts"],
  "sourcesContent": ["import { APIGatewayProxyResult } from 'aws-lambda';\r\nimport {\r\n  S3Client,\r\n  PutObjectCommand,\r\n  DeleteObjectCommand,\r\n} from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\n\r\n// Path-style so host stays s3.us-east-1.amazonaws.com and avoids per-bucket DNS lookups.\r\nconst s3 = new S3Client({\r\n  region: process.env.AWS_REGION || 'us-east-1',\r\n  forcePathStyle: true,\r\n});\r\n\r\nconst BUCKET = process.env.BUCKET!;\r\nconst ORIGIN = process.env.WEB_ORIGIN ?? 'https://stylingadventures.com';\r\nconst THUMBS_CDN = process.env.THUMBS_CDN;\r\n\r\ntype AnyEvent = any;\r\n\r\nconst corsHeaders = {\r\n  'Content-Type': 'application/json',\r\n  'Access-Control-Allow-Origin': ORIGIN,\r\n  'Access-Control-Allow-Headers':\r\n    'Authorization,Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token',\r\n  'Access-Control-Allow-Methods': 'GET,POST,DELETE,OPTIONS',\r\n  'Access-Control-Allow-Credentials': 'true',\r\n  Vary: 'Origin',\r\n};\r\n\r\nfunction ok(body: unknown, extra: Record<string, string> = {}): APIGatewayProxyResult {\r\n  return { statusCode: 200, headers: { ...corsHeaders, ...extra }, body: JSON.stringify(body) };\r\n}\r\nfunction bad(status: number, msg: string): APIGatewayProxyResult {\r\n  return { statusCode: status, headers: corsHeaders, body: JSON.stringify({ message: msg }) };\r\n}\r\n\r\nfunction getMethod(e: AnyEvent): string {\r\n  return e.httpMethod ?? e.requestContext?.http?.method ?? 'GET';\r\n}\r\nfunction getPath(e: AnyEvent): string {\r\n  return e.resource ?? e.rawPath ?? e.path ?? '/';\r\n}\r\nfunction getClaims(e: AnyEvent): Record<string, any> {\r\n  return e.requestContext?.authorizer?.claims ?? e.requestContext?.authorizer?.jwt?.claims ?? {};\r\n}\r\nfunction parseBody(e: AnyEvent): any {\r\n  if (!e.body) return undefined;\r\n  const raw = e.isBase64Encoded ? Buffer.from(e.body, 'base64').toString() : e.body;\r\n  try { return JSON.parse(raw); } catch { return undefined; }\r\n}\r\n\r\nexport const handler = async (event: AnyEvent): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    const method = getMethod(event);\r\n    const path = getPath(event);\r\n    const claims = getClaims(event);\r\n    const userSub = claims?.sub as string | undefined;\r\n\r\n    // CORS preflight\r\n    if (method === 'OPTIONS') return { statusCode: 204, headers: corsHeaders, body: '' };\r\n\r\n    // --- POST /presign ---\r\n    if (method === 'POST' && /\\/presign$/.test(path)) {\r\n      const body = parseBody(event);\r\n      if (!body) return bad(400, 'Missing body');\r\n\r\n      let { key, contentType } = body as { key?: string; contentType?: string };\r\n      if (!key || typeof key !== 'string') return bad(400, 'Invalid \"key\"');\r\n      if (!contentType || typeof contentType !== 'string') return bad(400, 'Invalid \"contentType\"');\r\n      if (key.includes('..')) return bad(400, 'Illegal key');\r\n\r\n      // Keep uploads in the caller\u2019s folder unless client already specified full path\r\n      if (userSub && !key.startsWith('users/')) key = `users/${userSub}/${key}`;\r\n\r\n      const cmd = new PutObjectCommand({ Bucket: BUCKET, Key: key, ContentType: contentType });\r\n      const url = await getSignedUrl(s3, cmd, { expiresIn: 900 });\r\n\r\n      return ok({ url, key, thumbsCdn: THUMBS_CDN });\r\n    }\r\n\r\n    // --- DELETE /delete ---\r\n    if (method === 'DELETE' && /\\/delete$/.test(path)) {\r\n      const body = parseBody(event);\r\n\r\n      // Accept key from JSON body OR from query string (?key=...)\r\n      const keyFromQuery = event?.queryStringParameters?.key\r\n        ? decodeURIComponent(event.queryStringParameters.key)\r\n        : undefined;\r\n      const key = (body?.key as string | undefined) ?? keyFromQuery;\r\n\r\n      if (!key || typeof key !== 'string') return bad(400, 'Invalid \"key\"');\r\n      if (userSub && !key.startsWith(`users/${userSub}/`)) return bad(403, 'Forbidden');\r\n\r\n      await s3.send(new DeleteObjectCommand({ Bucket: BUCKET, Key: key }));\r\n      return ok({ deleted: key });\r\n    }\r\n\r\n    return bad(404, 'Not Found');\r\n  } catch (e: any) {\r\n    console.error('handler error', e);\r\n    return bad(500, e?.message ?? 'Server error');\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["presign_exports", "__export", "handler", "__toCommonJS", "import_client_s3", "import_s3_request_presigner", "s3", "BUCKET", "ORIGIN", "THUMBS_CDN", "corsHeaders", "ok", "body", "extra", "bad", "status", "msg", "getMethod", "getPath", "getClaims", "parseBody", "raw", "event", "method", "path", "userSub", "key", "contentType", "cmd", "url", "keyFromQuery", "e"]
}
