{
  "version": 3,
  "sources": ["../../lambda/graphql/index.ts", "../../lambda/graphql/closet.ts"],
  "sourcesContent": ["// lambda/graphql/index.ts\r\nimport {\r\n  myCloset,\r\n  adminListPending,\r\n  createClosetItem,\r\n  requestClosetApproval,\r\n} from \"./closet\";\r\n\r\ntype AppSyncHandler = (event: any) => Promise<any>;\r\n\r\nconst map: Record<string, AppSyncHandler> = {\r\n  // Queries\r\n  myCloset,\r\n  adminListPending,\r\n  // Mutations\r\n  createClosetItem,\r\n  requestClosetApproval,\r\n  // Optional smoke test if you ever route hello here\r\n  hello: async () => \"Hello from Styling Adventures \uD83D\uDC4B\",\r\n};\r\n\r\nexport const handler: AppSyncHandler = async (event) => {\r\n  const field = event?.info?.fieldName as string;\r\n  const fn = map[field];\r\n  if (!fn) throw new Error(`No resolver for field ${field}`);\r\n  return fn(event);\r\n};\r\n", "// lambda/graphql/closet.ts\r\nimport {\r\n  DynamoDBClient,\r\n  PutItemCommand,\r\n  UpdateItemCommand,\r\n  GetItemCommand,\r\n  ScanCommand,\r\n} from \"@aws-sdk/client-dynamodb\";\r\nimport { SFNClient, StartExecutionCommand } from \"@aws-sdk/client-sfn\";\r\nimport { randomUUID } from \"crypto\";\r\n\r\nconst ddb = new DynamoDBClient({});\r\nconst sfn = new SFNClient({});\r\n\r\nconst { TABLE_NAME = \"\", APPROVAL_SM_ARN = \"\" } = process.env;\r\nif (!TABLE_NAME) throw new Error(\"Missing env: TABLE_NAME\");\r\n\r\nconst isoNow = () => new Date().toISOString();\r\nconst S = (v: string) => ({ S: v });\r\nconst S_NULLABLE = (v?: string | null) => (v == null ? { S: \"\" } : { S: v });\r\n\r\nfunction getIdentity(event: any) {\r\n  const claims = event?.identity?.claims || {};\r\n  const sub = event?.identity?.sub || claims?.sub;\r\n  const groups: string[] = Array.isArray(claims?.[\"cognito:groups\"])\r\n    ? claims[\"cognito:groups\"]\r\n    : String(claims?.[\"cognito:groups\"] || \"\")\r\n        .split(\",\")\r\n        .map((x) => x.trim())\r\n        .filter(Boolean);\r\n  const isAdmin = groups.includes(\"ADMIN\") || groups.includes(\"COLLAB\");\r\n  if (!sub) throw new Error(\"Unauthorized\");\r\n  return { sub, isAdmin };\r\n}\r\n\r\n/* ---------------- Queries used by /creator ---------------- */\r\n\r\nexport const myCloset = async (event: any) => {\r\n  const { sub } = getIdentity(event);\r\n\r\n  // No GSIs yet -> Scan with FilterExpression (OK for low volumes)\r\n  const out = await ddb.send(\r\n    new ScanCommand({\r\n      TableName: TABLE_NAME,\r\n      FilterExpression: \"begins_with(pk, :pfx) AND ownerSub = :me\",\r\n      ExpressionAttributeValues: {\r\n        \":pfx\": S(\"ITEM#\"),\r\n        \":me\": S(sub),\r\n      },\r\n      ProjectionExpression:\r\n        \"id, ownerSub, status, createdAt, updatedAt, mediaKey, title, reason\",\r\n      Limit: 100,\r\n    })\r\n  );\r\n\r\n  return (out.Items || []).map((it) => ({\r\n    id: it.id?.S!,\r\n    ownerSub: it.ownerSub?.S!,\r\n    status: it.status?.S!,\r\n    createdAt: it.createdAt?.S!,\r\n    updatedAt: it.updatedAt?.S!,\r\n    mediaKey: it.mediaKey?.S || null,\r\n    title: it.title?.S || null,\r\n    reason: it.reason?.S || null,\r\n  }));\r\n};\r\n\r\nexport const adminListPending = async (event: any) => {\r\n  const { isAdmin } = getIdentity(event);\r\n  if (!isAdmin) throw new Error(\"Unauthorized\");\r\n\r\n  const out = await ddb.send(\r\n    new ScanCommand({\r\n      TableName: TABLE_NAME,\r\n      FilterExpression: \"begins_with(pk, :pfx) AND #s = :pending\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n      ExpressionAttributeValues: { \":pfx\": S(\"ITEM#\"), \":pending\": S(\"PENDING\") },\r\n      ProjectionExpression:\r\n        \"id, ownerSub, status, createdAt, updatedAt, mediaKey, title, reason\",\r\n      Limit: 100,\r\n    })\r\n  );\r\n\r\n  return (out.Items || []).map((it) => ({\r\n    id: it.id?.S!,\r\n    ownerSub: it.ownerSub?.S!,\r\n    status: it.status?.S!,\r\n    createdAt: it.createdAt?.S!,\r\n    updatedAt: it.updatedAt?.S!,\r\n    mediaKey: it.mediaKey?.S || null,\r\n    title: it.title?.S || null,\r\n    reason: it.reason?.S || null,\r\n  }));\r\n};\r\n\r\n/* ---------------- Mutations ---------------- */\r\n\r\nexport const requestClosetApproval = async (event: any) => {\r\n  const { sub, isAdmin } = getIdentity(event);\r\n  const id: string | undefined = event?.arguments?.id;\r\n  if (!id) throw new Error(\"id required\");\r\n\r\n  const now = isoNow();\r\n\r\n  // If not admin, confirm ownership\r\n  if (!isAdmin) {\r\n    const got = await ddb.send(\r\n      new GetItemCommand({\r\n        TableName: TABLE_NAME,\r\n        Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n        ProjectionExpression: \"ownerSub\",\r\n      })\r\n    );\r\n    const ownerSub = got.Item?.ownerSub?.S;\r\n    if (!ownerSub) throw new Error(\"Not found\");\r\n    if (ownerSub !== sub) throw new Error(\"Not authorized\");\r\n  }\r\n\r\n  await ddb.send(\r\n    new UpdateItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Key: { pk: S(`ITEM#${id}`), sk: S(\"META\") },\r\n      UpdateExpression:\r\n        \"SET #s = :s, updatedAt = :u, gsi2pk = :g2pk, gsi2sk = :g2sk\",\r\n      ExpressionAttributeNames: { \"#s\": \"status\" },\r\n      ExpressionAttributeValues: {\r\n        \":s\": S(\"PENDING\"),\r\n        \":u\": S(now),\r\n        \":g2pk\": S(\"STATUS#PENDING\"),\r\n        \":g2sk\": S(now),\r\n      },\r\n    })\r\n  );\r\n\r\n  if (APPROVAL_SM_ARN) {\r\n    try {\r\n      await sfn.send(\r\n        new StartExecutionCommand({\r\n          stateMachineArn: APPROVAL_SM_ARN,\r\n          input: JSON.stringify({ itemId: id, ownerSub: sub }),\r\n          name: `req-${id}-${Date.now()}`,\r\n        })\r\n      );\r\n    } catch {\r\n      /* don't block UX */\r\n    }\r\n  }\r\n\r\n  // Your schema returns String! (executionArn) \u2014 if you prefer boolean, adjust schema.\r\n  return \"OK\";\r\n};\r\n\r\nexport const createClosetItem = async (event: any) => {\r\n  const { sub } = getIdentity(event);\r\n  const args = event?.arguments || {};\r\n  const id = randomUUID();\r\n  const now = isoNow();\r\n\r\n  await ddb.send(\r\n    new PutItemCommand({\r\n      TableName: TABLE_NAME,\r\n      Item: {\r\n        pk: S(`ITEM#${id}`),\r\n        sk: S(\"META\"),\r\n        id: S(id),\r\n        ownerSub: S(sub),\r\n        status: S(\"DRAFT\"),\r\n        title: S_NULLABLE(args.title),\r\n        mediaKey: S_NULLABLE(args.mediaKey),\r\n        createdAt: S(now),\r\n        updatedAt: S(now),\r\n        // Future GSIs\r\n        gsi1pk: S(`OWNER#${sub}`),\r\n        gsi1sk: S(now),\r\n        gsi2pk: S(\"STATUS#DRAFT\"),\r\n        gsi2sk: S(now),\r\n      },\r\n      ConditionExpression: \"attribute_not_exists(pk)\",\r\n    })\r\n  );\r\n\r\n  return {\r\n    id,\r\n    ownerSub: sub,\r\n    status: \"DRAFT\",\r\n    title: args.title ?? \"\",\r\n    mediaKey: args.mediaKey ?? \"\",\r\n    createdAt: now,\r\n    updatedAt: now,\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": ["graphql_exports", "__export", "handler", "__toCommonJS", "import_client_dynamodb", "import_client_sfn", "import_crypto", "ddb", "sfn", "TABLE_NAME", "APPROVAL_SM_ARN", "isoNow", "S", "v", "S_NULLABLE", "getIdentity", "event", "claims", "sub", "groups", "x", "isAdmin", "myCloset", "it", "adminListPending", "requestClosetApproval", "id", "now", "ownerSub", "createClosetItem", "args", "map", "myCloset", "adminListPending", "createClosetItem", "requestClosetApproval", "handler", "event", "field", "fn"]
}
