"""Auth directive used in this API (mapped to Cognito user pools in AppSync)"""
directive @aws_auth(cognito_groups: [String]) on FIELD_DEFINITION | OBJECT

""" -------- App base enums & types -------- """
enum ClosetStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
}

type ClosetItem {
  id: ID!
  ownerSub: String!
  status: ClosetStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  mediaKey: String
  title: String
  reason: String          # optional: why REJECTED
}

"""RBAC: roles & tiers"""
enum Role { FAN BESTIE CREATOR COLLAB ADMIN }
enum Tier { FREE PRIME }

type User {
  id: ID!
  email: AWSEmail
  role: Role!
  tier: Tier
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input SetUserRoleInput {
  userId: ID!
  email: AWSEmail
  role: Role!
  tier: Tier
}

"""Paged list of users for admin UI"""
type AdminUsersPage {
  items: [User!]!
  nextToken: String
}

""" -------- Queries -------- """
type Query {
  hello: String!

  """
  Returns the signed-in creatorâ€™s items. Never null; empty list if none.
  Implemented by lambda/graphql/closet.ts -> myCloset
  """
  myCloset: [ClosetItem!]!

  """
  Items awaiting moderation. Requires elevated groups.
  Implemented by lambda/graphql/closet.ts -> adminListPending
  """
  adminListPending: [ClosetItem!]!
    @aws_auth(cognito_groups: ["ADMIN", "COLLAB", "PRIME"])

  # Roles / user directory
  me: User!
  adminListUsers(search: String, limit: Int, nextToken: String): AdminUsersPage
    @aws_auth(cognito_groups: ["ADMIN"])
}

""" -------- Mutations -------- """
type Mutation {
  """
  Creates a new item in DRAFT.
  Implemented by lambda/graphql/closet.ts -> createClosetItem
  """
  createClosetItem(title: String, mediaKey: String): ClosetItem! @aws_auth

  """
  Marks item PENDING and starts the approval Step Function.
  Returns a string (execution request marker).
  Implemented by lambda/graphql/closet.ts -> requestClosetApproval
  """
  requestClosetApproval(id: ID!): String!

  # Roles
  setUserRole(input: SetUserRoleInput!): User!

  # Moderation actions
  adminApproveItem(id: ID!): ClosetItem!
    @aws_auth(cognito_groups: ["ADMIN", "COLLAB"])
  adminRejectItem(id: ID!, reason: String): ClosetItem!
    @aws_auth(cognito_groups: ["ADMIN", "COLLAB"])

  """
  Admin/creator fix-up: update the media key on an item.
  Implemented by lambda/graphql/closet.ts -> updateClosetMediaKey
  """
  updateClosetMediaKey(id: ID!, mediaKey: String!): ClosetItem!
}

schema {
  query: Query
  mutation: Mutation
}

